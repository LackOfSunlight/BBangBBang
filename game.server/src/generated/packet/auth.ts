// @generated by protobuf-ts 2.11.1 with parameter long_type_string
// @generated from protobuf file "packet/auth.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
import { UserData } from '../common/types';
import { GlobalFailCode } from '../common/enums';
/**
 *
 * 패킷 명세
 *
 * @generated from protobuf message C2SRegisterRequest
 */
export interface C2SRegisterRequest {
	/**
	 * @generated from protobuf field: string email = 1
	 */
	email: string;
	/**
	 * @generated from protobuf field: string nickname = 2
	 */
	nickname: string;
	/**
	 * @generated from protobuf field: string password = 3
	 */
	password: string;
}
/**
 * @generated from protobuf message S2CRegisterResponse
 */
export interface S2CRegisterResponse {
	/**
	 * @generated from protobuf field: bool success = 1
	 */
	success: boolean;
	/**
	 * @generated from protobuf field: string message = 2
	 */
	message: string;
	/**
	 * @generated from protobuf field: GlobalFailCode failCode = 3
	 */
	failCode: GlobalFailCode;
}
/**
 * @generated from protobuf message C2SLoginRequest
 */
export interface C2SLoginRequest {
	/**
	 * @generated from protobuf field: string email = 1
	 */
	email: string;
	/**
	 * @generated from protobuf field: string password = 2
	 */
	password: string;
}
/**
 * @generated from protobuf message S2CLoginResponse
 */
export interface S2CLoginResponse {
	/**
	 * @generated from protobuf field: bool success = 1
	 */
	success: boolean;
	/**
	 * @generated from protobuf field: string message = 2
	 */
	message: string;
	/**
	 * @generated from protobuf field: string token = 3
	 */
	token: string;
	/**
	 * @generated from protobuf field: UserData myInfo = 4
	 */
	myInfo?: UserData;
	/**
	 * @generated from protobuf field: GlobalFailCode failCode = 5
	 */
	failCode: GlobalFailCode;
}
// @generated message type with reflection information, may provide speed optimized methods
class C2SRegisterRequest$Type extends MessageType<C2SRegisterRequest> {
	constructor() {
		super('C2SRegisterRequest', [
			{ no: 1, name: 'email', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
			{ no: 2, name: 'nickname', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
			{ no: 3, name: 'password', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
		]);
	}
	create(value?: PartialMessage<C2SRegisterRequest>): C2SRegisterRequest {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.email = '';
		message.nickname = '';
		message.password = '';
		if (value !== undefined) reflectionMergePartial<C2SRegisterRequest>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: C2SRegisterRequest,
	): C2SRegisterRequest {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* string email */ 1:
					message.email = reader.string();
					break;
				case /* string nickname */ 2:
					message.nickname = reader.string();
					break;
				case /* string password */ 3:
					message.password = reader.string();
					break;
				default:
					let u = options.readUnknownField;
					if (u === 'throw')
						throw new globalThis.Error(
							`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
						);
					let d = reader.skip(wireType);
					if (u !== false)
						(u === true ? UnknownFieldHandler.onRead : u)(
							this.typeName,
							message,
							fieldNo,
							wireType,
							d,
						);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: C2SRegisterRequest,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* string email = 1; */
		if (message.email !== '') writer.tag(1, WireType.LengthDelimited).string(message.email);
		/* string nickname = 2; */
		if (message.nickname !== '') writer.tag(2, WireType.LengthDelimited).string(message.nickname);
		/* string password = 3; */
		if (message.password !== '') writer.tag(3, WireType.LengthDelimited).string(message.password);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message C2SRegisterRequest
 */
export const C2SRegisterRequest = new C2SRegisterRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class S2CRegisterResponse$Type extends MessageType<S2CRegisterResponse> {
	constructor() {
		super('S2CRegisterResponse', [
			{ no: 1, name: 'success', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
			{ no: 2, name: 'message', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
			{ no: 3, name: 'failCode', kind: 'enum', T: () => ['GlobalFailCode', GlobalFailCode] },
		]);
	}
	create(value?: PartialMessage<S2CRegisterResponse>): S2CRegisterResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.success = false;
		message.message = '';
		message.failCode = 0;
		if (value !== undefined) reflectionMergePartial<S2CRegisterResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: S2CRegisterResponse,
	): S2CRegisterResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* bool success */ 1:
					message.success = reader.bool();
					break;
				case /* string message */ 2:
					message.message = reader.string();
					break;
				case /* GlobalFailCode failCode */ 3:
					message.failCode = reader.int32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === 'throw')
						throw new globalThis.Error(
							`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
						);
					let d = reader.skip(wireType);
					if (u !== false)
						(u === true ? UnknownFieldHandler.onRead : u)(
							this.typeName,
							message,
							fieldNo,
							wireType,
							d,
						);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: S2CRegisterResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* bool success = 1; */
		if (message.success !== false) writer.tag(1, WireType.Varint).bool(message.success);
		/* string message = 2; */
		if (message.message !== '') writer.tag(2, WireType.LengthDelimited).string(message.message);
		/* GlobalFailCode failCode = 3; */
		if (message.failCode !== 0) writer.tag(3, WireType.Varint).int32(message.failCode);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message S2CRegisterResponse
 */
export const S2CRegisterResponse = new S2CRegisterResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class C2SLoginRequest$Type extends MessageType<C2SLoginRequest> {
	constructor() {
		super('C2SLoginRequest', [
			{ no: 1, name: 'email', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
			{ no: 2, name: 'password', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
		]);
	}
	create(value?: PartialMessage<C2SLoginRequest>): C2SLoginRequest {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.email = '';
		message.password = '';
		if (value !== undefined) reflectionMergePartial<C2SLoginRequest>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: C2SLoginRequest,
	): C2SLoginRequest {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* string email */ 1:
					message.email = reader.string();
					break;
				case /* string password */ 2:
					message.password = reader.string();
					break;
				default:
					let u = options.readUnknownField;
					if (u === 'throw')
						throw new globalThis.Error(
							`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
						);
					let d = reader.skip(wireType);
					if (u !== false)
						(u === true ? UnknownFieldHandler.onRead : u)(
							this.typeName,
							message,
							fieldNo,
							wireType,
							d,
						);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: C2SLoginRequest,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* string email = 1; */
		if (message.email !== '') writer.tag(1, WireType.LengthDelimited).string(message.email);
		/* string password = 2; */
		if (message.password !== '') writer.tag(2, WireType.LengthDelimited).string(message.password);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message C2SLoginRequest
 */
export const C2SLoginRequest = new C2SLoginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class S2CLoginResponse$Type extends MessageType<S2CLoginResponse> {
	constructor() {
		super('S2CLoginResponse', [
			{ no: 1, name: 'success', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },
			{ no: 2, name: 'message', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
			{ no: 3, name: 'token', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
			{ no: 4, name: 'myInfo', kind: 'message', T: () => UserData },
			{ no: 5, name: 'failCode', kind: 'enum', T: () => ['GlobalFailCode', GlobalFailCode] },
		]);
	}
	create(value?: PartialMessage<S2CLoginResponse>): S2CLoginResponse {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.success = false;
		message.message = '';
		message.token = '';
		message.failCode = 0;
		if (value !== undefined) reflectionMergePartial<S2CLoginResponse>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: S2CLoginResponse,
	): S2CLoginResponse {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* bool success */ 1:
					message.success = reader.bool();
					break;
				case /* string message */ 2:
					message.message = reader.string();
					break;
				case /* string token */ 3:
					message.token = reader.string();
					break;
				case /* UserData myInfo */ 4:
					message.myInfo = UserData.internalBinaryRead(
						reader,
						reader.uint32(),
						options,
						message.myInfo,
					);
					break;
				case /* GlobalFailCode failCode */ 5:
					message.failCode = reader.int32();
					break;
				default:
					let u = options.readUnknownField;
					if (u === 'throw')
						throw new globalThis.Error(
							`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
						);
					let d = reader.skip(wireType);
					if (u !== false)
						(u === true ? UnknownFieldHandler.onRead : u)(
							this.typeName,
							message,
							fieldNo,
							wireType,
							d,
						);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: S2CLoginResponse,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* bool success = 1; */
		if (message.success !== false) writer.tag(1, WireType.Varint).bool(message.success);
		/* string message = 2; */
		if (message.message !== '') writer.tag(2, WireType.LengthDelimited).string(message.message);
		/* string token = 3; */
		if (message.token !== '') writer.tag(3, WireType.LengthDelimited).string(message.token);
		/* UserData myInfo = 4; */
		if (message.myInfo)
			UserData.internalBinaryWrite(
				message.myInfo,
				writer.tag(4, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* GlobalFailCode failCode = 5; */
		if (message.failCode !== 0) writer.tag(5, WireType.Varint).int32(message.failCode);
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message S2CLoginResponse
 */
export const S2CLoginResponse = new S2CLoginResponse$Type();
