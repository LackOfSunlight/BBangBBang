// @generated by protobuf-ts 2.11.1 with parameter long_type_string
// @generated from protobuf file "gamePacket.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
import { S2CAnimationNotification } from './packet/notifications';
import { S2CWarningNotification } from './packet/notifications';
import { S2CPassDebuffResponse } from './packet/game_actions';
import { C2SPassDebuffRequest } from './packet/game_actions';
import { S2CCardSelectResponse } from './packet/game_actions';
import { C2SCardSelectRequest } from './packet/game_actions';
import { S2CGameEndNotification } from './packet/notifications';
import { S2CDestroyCardResponse } from './packet/game_actions';
import { C2SDestroyCardRequest } from './packet/game_actions';
import { S2CReactionResponse } from './packet/game_actions';
import { C2SReactionRequest } from './packet/game_actions';
import { S2CPhaseUpdateNotification } from './packet/notifications';
import { S2CUserUpdateNotification } from './packet/notifications';
import { S2CFleaMarketPickResponse } from './packet/game_actions';
import { C2SFleaMarketPickRequest } from './packet/game_actions';
import { S2CFleaMarketNotification } from './packet/notifications';
import { S2CCardEffectNotification } from './packet/notifications';
import { S2CEquipCardNotification } from './packet/notifications';
import { S2CUseCardNotification } from './packet/notifications';
import { S2CUseCardResponse } from './packet/game_actions';
import { C2SUseCardRequest } from './packet/game_actions';
import { S2CPositionUpdateNotification } from './packet/notifications';
import { C2SPositionUpdateRequest } from './packet/game_actions';
import { S2CGameStartNotification } from './packet/notifications';
import { S2CGameStartResponse } from './packet/game_actions';
import { C2SGameStartRequest } from './packet/game_actions';
import { S2CGamePrepareNotification } from './packet/notifications';
import { S2CGamePrepareResponse } from './packet/game_actions';
import { C2SGamePrepareRequest } from './packet/game_actions';
import { S2CLeaveRoomNotification } from './packet/notifications';
import { S2CLeaveRoomResponse } from './packet/room_actions';
import { C2SLeaveRoomRequest } from './packet/room_actions';
import { S2CJoinRoomNotification } from './packet/notifications';
import { S2CJoinRandomRoomResponse } from './packet/room_actions';
import { C2SJoinRandomRoomRequest } from './packet/room_actions';
import { S2CJoinRoomResponse } from './packet/room_actions';
import { C2SJoinRoomRequest } from './packet/room_actions';
import { S2CGetRoomListResponse } from './packet/room_actions';
import { C2SGetRoomListRequest } from './packet/room_actions';
import { S2CCreateRoomResponse } from './packet/room_actions';
import { C2SCreateRoomRequest } from './packet/room_actions';
import { S2CLoginResponse } from './packet/auth';
import { C2SLoginRequest } from './packet/auth';
import { S2CRegisterResponse } from './packet/auth';
import { C2SRegisterRequest } from './packet/auth';
/**
 * 최상위 GamePacket 메시지
 *
 * @generated from protobuf message GamePacket
 */
export interface GamePacket {
	/**
	 * @generated from protobuf oneof: payload
	 */
	payload:
		| {
				oneofKind: 'registerRequest';
				/**
				 * 회원가입 및 로그인
				 *
				 * @generated from protobuf field: C2SRegisterRequest registerRequest = 1
				 */
				registerRequest: C2SRegisterRequest;
		  }
		| {
				oneofKind: 'registerResponse';
				/**
				 * @generated from protobuf field: S2CRegisterResponse registerResponse = 2
				 */
				registerResponse: S2CRegisterResponse;
		  }
		| {
				oneofKind: 'loginRequest';
				/**
				 * @generated from protobuf field: C2SLoginRequest loginRequest = 3
				 */
				loginRequest: C2SLoginRequest;
		  }
		| {
				oneofKind: 'loginResponse';
				/**
				 * @generated from protobuf field: S2CLoginResponse loginResponse = 4
				 */
				loginResponse: S2CLoginResponse;
		  }
		| {
				oneofKind: 'createRoomRequest';
				/**
				 * 방 생성
				 *
				 * @generated from protobuf field: C2SCreateRoomRequest createRoomRequest = 5
				 */
				createRoomRequest: C2SCreateRoomRequest;
		  }
		| {
				oneofKind: 'createRoomResponse';
				/**
				 * @generated from protobuf field: S2CCreateRoomResponse createRoomResponse = 6
				 */
				createRoomResponse: S2CCreateRoomResponse;
		  }
		| {
				oneofKind: 'getRoomListRequest';
				/**
				 * 방 목록 조회
				 *
				 * @generated from protobuf field: C2SGetRoomListRequest getRoomListRequest = 7
				 */
				getRoomListRequest: C2SGetRoomListRequest;
		  }
		| {
				oneofKind: 'getRoomListResponse';
				/**
				 * @generated from protobuf field: S2CGetRoomListResponse getRoomListResponse = 8
				 */
				getRoomListResponse: S2CGetRoomListResponse;
		  }
		| {
				oneofKind: 'joinRoomRequest';
				/**
				 * 방 참가
				 *
				 * @generated from protobuf field: C2SJoinRoomRequest joinRoomRequest = 9
				 */
				joinRoomRequest: C2SJoinRoomRequest;
		  }
		| {
				oneofKind: 'joinRoomResponse';
				/**
				 * @generated from protobuf field: S2CJoinRoomResponse joinRoomResponse = 10
				 */
				joinRoomResponse: S2CJoinRoomResponse;
		  }
		| {
				oneofKind: 'joinRandomRoomRequest';
				/**
				 * 랜덤 방 참가
				 *
				 * @generated from protobuf field: C2SJoinRandomRoomRequest joinRandomRoomRequest = 11
				 */
				joinRandomRoomRequest: C2SJoinRandomRoomRequest;
		  }
		| {
				oneofKind: 'joinRandomRoomResponse';
				/**
				 * @generated from protobuf field: S2CJoinRandomRoomResponse joinRandomRoomResponse = 12
				 */
				joinRandomRoomResponse: S2CJoinRandomRoomResponse;
		  }
		| {
				oneofKind: 'joinRoomNotification';
				/**
				 * 방 참가 알림
				 *
				 * @generated from protobuf field: S2CJoinRoomNotification joinRoomNotification = 13
				 */
				joinRoomNotification: S2CJoinRoomNotification;
		  }
		| {
				oneofKind: 'leaveRoomRequest';
				/**
				 * 방 나가기
				 *
				 * @generated from protobuf field: C2SLeaveRoomRequest leaveRoomRequest = 14
				 */
				leaveRoomRequest: C2SLeaveRoomRequest;
		  }
		| {
				oneofKind: 'leaveRoomResponse';
				/**
				 * @generated from protobuf field: S2CLeaveRoomResponse leaveRoomResponse = 15
				 */
				leaveRoomResponse: S2CLeaveRoomResponse;
		  }
		| {
				oneofKind: 'leaveRoomNotification';
				/**
				 * 방 나가기 알림
				 *
				 * @generated from protobuf field: S2CLeaveRoomNotification leaveRoomNotification = 16
				 */
				leaveRoomNotification: S2CLeaveRoomNotification;
		  }
		| {
				oneofKind: 'gamePrepareRequest';
				/**
				 * 게임 시작 전 역할 및 캐릭터 셔플 요청
				 *
				 * @generated from protobuf field: C2SGamePrepareRequest gamePrepareRequest = 17
				 */
				gamePrepareRequest: C2SGamePrepareRequest;
		  }
		| {
				oneofKind: 'gamePrepareResponse';
				/**
				 * @generated from protobuf field: S2CGamePrepareResponse gamePrepareResponse = 18
				 */
				gamePrepareResponse: S2CGamePrepareResponse;
		  }
		| {
				oneofKind: 'gamePrepareNotification';
				/**
				 * @generated from protobuf field: S2CGamePrepareNotification gamePrepareNotification = 19
				 */
				gamePrepareNotification: S2CGamePrepareNotification;
		  }
		| {
				oneofKind: 'gameStartRequest';
				/**
				 * 게임 시작
				 *
				 * @generated from protobuf field: C2SGameStartRequest gameStartRequest = 20
				 */
				gameStartRequest: C2SGameStartRequest;
		  }
		| {
				oneofKind: 'gameStartResponse';
				/**
				 * @generated from protobuf field: S2CGameStartResponse gameStartResponse = 21
				 */
				gameStartResponse: S2CGameStartResponse;
		  }
		| {
				oneofKind: 'gameStartNotification';
				/**
				 * @generated from protobuf field: S2CGameStartNotification gameStartNotification = 22
				 */
				gameStartNotification: S2CGameStartNotification;
		  }
		| {
				oneofKind: 'positionUpdateRequest';
				/**
				 * 위치 업데이트
				 *
				 * @generated from protobuf field: C2SPositionUpdateRequest positionUpdateRequest = 23
				 */
				positionUpdateRequest: C2SPositionUpdateRequest;
		  }
		| {
				oneofKind: 'positionUpdateNotification';
				/**
				 * @generated from protobuf field: S2CPositionUpdateNotification positionUpdateNotification = 24
				 */
				positionUpdateNotification: S2CPositionUpdateNotification;
		  }
		| {
				oneofKind: 'useCardRequest';
				/**
				 * 카드 사용
				 *
				 * @generated from protobuf field: C2SUseCardRequest useCardRequest = 25
				 */
				useCardRequest: C2SUseCardRequest;
		  }
		| {
				oneofKind: 'useCardResponse';
				/**
				 * @generated from protobuf field: S2CUseCardResponse useCardResponse = 26
				 */
				useCardResponse: S2CUseCardResponse;
		  }
		| {
				oneofKind: 'useCardNotification';
				/**
				 * 카드 효과 알림
				 *
				 * @generated from protobuf field: S2CUseCardNotification useCardNotification = 27
				 */
				useCardNotification: S2CUseCardNotification;
		  }
		| {
				oneofKind: 'equipCardNotification';
				/**
				 * @generated from protobuf field: S2CEquipCardNotification equipCardNotification = 28
				 */
				equipCardNotification: S2CEquipCardNotification;
		  }
		| {
				oneofKind: 'cardEffectNotification';
				/**
				 * @generated from protobuf field: S2CCardEffectNotification cardEffectNotification = 29
				 */
				cardEffectNotification: S2CCardEffectNotification;
		  }
		| {
				oneofKind: 'fleaMarketNotification';
				/**
				 * 플리마켓
				 *
				 * @generated from protobuf field: S2CFleaMarketNotification fleaMarketNotification = 30
				 */
				fleaMarketNotification: S2CFleaMarketNotification;
		  }
		| {
				oneofKind: 'fleaMarketPickRequest';
				/**
				 * @generated from protobuf field: C2SFleaMarketPickRequest fleaMarketPickRequest = 31
				 */
				fleaMarketPickRequest: C2SFleaMarketPickRequest;
		  }
		| {
				oneofKind: 'fleaMarketPickResponse';
				/**
				 * @generated from protobuf field: S2CFleaMarketPickResponse fleaMarketPickResponse = 32
				 */
				fleaMarketPickResponse: S2CFleaMarketPickResponse;
		  }
		| {
				oneofKind: 'userUpdateNotification';
				/**
				 * 카드 사용 등으로 인한 유저 정보 업데이트
				 *
				 * @generated from protobuf field: S2CUserUpdateNotification userUpdateNotification = 33
				 */
				userUpdateNotification: S2CUserUpdateNotification;
		  }
		| {
				oneofKind: 'phaseUpdateNotification';
				/**
				 * 페이즈 업데이트
				 *
				 * @generated from protobuf field: S2CPhaseUpdateNotification phaseUpdateNotification = 34
				 */
				phaseUpdateNotification: S2CPhaseUpdateNotification;
		  }
		| {
				oneofKind: 'reactionRequest';
				/**
				 * 리액션
				 *
				 * @generated from protobuf field: C2SReactionRequest reactionRequest = 35
				 */
				reactionRequest: C2SReactionRequest;
		  }
		| {
				oneofKind: 'reactionResponse';
				/**
				 * @generated from protobuf field: S2CReactionResponse reactionResponse = 36
				 */
				reactionResponse: S2CReactionResponse;
		  }
		| {
				oneofKind: 'destroyCardRequest';
				/**
				 * 턴 종료시 (phaseType 3) 카드 버리기
				 *
				 * @generated from protobuf field: C2SDestroyCardRequest destroyCardRequest = 37
				 */
				destroyCardRequest: C2SDestroyCardRequest;
		  }
		| {
				oneofKind: 'destroyCardResponse';
				/**
				 * @generated from protobuf field: S2CDestroyCardResponse destroyCardResponse = 38
				 */
				destroyCardResponse: S2CDestroyCardResponse;
		  }
		| {
				oneofKind: 'gameEndNotification';
				/**
				 * 게임 종료
				 *
				 * @generated from protobuf field: S2CGameEndNotification gameEndNotification = 39
				 */
				gameEndNotification: S2CGameEndNotification;
		  }
		| {
				oneofKind: 'cardSelectRequest';
				/**
				 * 카드 선택
				 *
				 * @generated from protobuf field: C2SCardSelectRequest cardSelectRequest = 40
				 */
				cardSelectRequest: C2SCardSelectRequest;
		  }
		| {
				oneofKind: 'cardSelectResponse';
				/**
				 * @generated from protobuf field: S2CCardSelectResponse cardSelectResponse = 41
				 */
				cardSelectResponse: S2CCardSelectResponse;
		  }
		| {
				oneofKind: 'passDebuffRequest';
				/**
				 * 디버프 넘기기
				 *
				 * @generated from protobuf field: C2SPassDebuffRequest passDebuffRequest = 42
				 */
				passDebuffRequest: C2SPassDebuffRequest;
		  }
		| {
				oneofKind: 'passDebuffResponse';
				/**
				 * @generated from protobuf field: S2CPassDebuffResponse passDebuffResponse = 43
				 */
				passDebuffResponse: S2CPassDebuffResponse;
		  }
		| {
				oneofKind: 'warningNotification';
				/**
				 * @generated from protobuf field: S2CWarningNotification warningNotification = 44
				 */
				warningNotification: S2CWarningNotification;
		  }
		| {
				oneofKind: 'animationNotification';
				/**
				 * 효과 알림
				 *
				 * @generated from protobuf field: S2CAnimationNotification animationNotification = 45
				 */
				animationNotification: S2CAnimationNotification;
		  }
		| {
				oneofKind: undefined;
		  };
}
// @generated message type with reflection information, may provide speed optimized methods
class GamePacket$Type extends MessageType<GamePacket> {
	constructor() {
		super('GamePacket', [
			{
				no: 1,
				name: 'registerRequest',
				kind: 'message',
				oneof: 'payload',
				T: () => C2SRegisterRequest,
			},
			{
				no: 2,
				name: 'registerResponse',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CRegisterResponse,
			},
			{ no: 3, name: 'loginRequest', kind: 'message', oneof: 'payload', T: () => C2SLoginRequest },
			{
				no: 4,
				name: 'loginResponse',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CLoginResponse,
			},
			{
				no: 5,
				name: 'createRoomRequest',
				kind: 'message',
				oneof: 'payload',
				T: () => C2SCreateRoomRequest,
			},
			{
				no: 6,
				name: 'createRoomResponse',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CCreateRoomResponse,
			},
			{
				no: 7,
				name: 'getRoomListRequest',
				kind: 'message',
				oneof: 'payload',
				T: () => C2SGetRoomListRequest,
			},
			{
				no: 8,
				name: 'getRoomListResponse',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CGetRoomListResponse,
			},
			{
				no: 9,
				name: 'joinRoomRequest',
				kind: 'message',
				oneof: 'payload',
				T: () => C2SJoinRoomRequest,
			},
			{
				no: 10,
				name: 'joinRoomResponse',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CJoinRoomResponse,
			},
			{
				no: 11,
				name: 'joinRandomRoomRequest',
				kind: 'message',
				oneof: 'payload',
				T: () => C2SJoinRandomRoomRequest,
			},
			{
				no: 12,
				name: 'joinRandomRoomResponse',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CJoinRandomRoomResponse,
			},
			{
				no: 13,
				name: 'joinRoomNotification',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CJoinRoomNotification,
			},
			{
				no: 14,
				name: 'leaveRoomRequest',
				kind: 'message',
				oneof: 'payload',
				T: () => C2SLeaveRoomRequest,
			},
			{
				no: 15,
				name: 'leaveRoomResponse',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CLeaveRoomResponse,
			},
			{
				no: 16,
				name: 'leaveRoomNotification',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CLeaveRoomNotification,
			},
			{
				no: 17,
				name: 'gamePrepareRequest',
				kind: 'message',
				oneof: 'payload',
				T: () => C2SGamePrepareRequest,
			},
			{
				no: 18,
				name: 'gamePrepareResponse',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CGamePrepareResponse,
			},
			{
				no: 19,
				name: 'gamePrepareNotification',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CGamePrepareNotification,
			},
			{
				no: 20,
				name: 'gameStartRequest',
				kind: 'message',
				oneof: 'payload',
				T: () => C2SGameStartRequest,
			},
			{
				no: 21,
				name: 'gameStartResponse',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CGameStartResponse,
			},
			{
				no: 22,
				name: 'gameStartNotification',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CGameStartNotification,
			},
			{
				no: 23,
				name: 'positionUpdateRequest',
				kind: 'message',
				oneof: 'payload',
				T: () => C2SPositionUpdateRequest,
			},
			{
				no: 24,
				name: 'positionUpdateNotification',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CPositionUpdateNotification,
			},
			{
				no: 25,
				name: 'useCardRequest',
				kind: 'message',
				oneof: 'payload',
				T: () => C2SUseCardRequest,
			},
			{
				no: 26,
				name: 'useCardResponse',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CUseCardResponse,
			},
			{
				no: 27,
				name: 'useCardNotification',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CUseCardNotification,
			},
			{
				no: 28,
				name: 'equipCardNotification',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CEquipCardNotification,
			},
			{
				no: 29,
				name: 'cardEffectNotification',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CCardEffectNotification,
			},
			{
				no: 30,
				name: 'fleaMarketNotification',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CFleaMarketNotification,
			},
			{
				no: 31,
				name: 'fleaMarketPickRequest',
				kind: 'message',
				oneof: 'payload',
				T: () => C2SFleaMarketPickRequest,
			},
			{
				no: 32,
				name: 'fleaMarketPickResponse',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CFleaMarketPickResponse,
			},
			{
				no: 33,
				name: 'userUpdateNotification',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CUserUpdateNotification,
			},
			{
				no: 34,
				name: 'phaseUpdateNotification',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CPhaseUpdateNotification,
			},
			{
				no: 35,
				name: 'reactionRequest',
				kind: 'message',
				oneof: 'payload',
				T: () => C2SReactionRequest,
			},
			{
				no: 36,
				name: 'reactionResponse',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CReactionResponse,
			},
			{
				no: 37,
				name: 'destroyCardRequest',
				kind: 'message',
				oneof: 'payload',
				T: () => C2SDestroyCardRequest,
			},
			{
				no: 38,
				name: 'destroyCardResponse',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CDestroyCardResponse,
			},
			{
				no: 39,
				name: 'gameEndNotification',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CGameEndNotification,
			},
			{
				no: 40,
				name: 'cardSelectRequest',
				kind: 'message',
				oneof: 'payload',
				T: () => C2SCardSelectRequest,
			},
			{
				no: 41,
				name: 'cardSelectResponse',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CCardSelectResponse,
			},
			{
				no: 42,
				name: 'passDebuffRequest',
				kind: 'message',
				oneof: 'payload',
				T: () => C2SPassDebuffRequest,
			},
			{
				no: 43,
				name: 'passDebuffResponse',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CPassDebuffResponse,
			},
			{
				no: 44,
				name: 'warningNotification',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CWarningNotification,
			},
			{
				no: 45,
				name: 'animationNotification',
				kind: 'message',
				oneof: 'payload',
				T: () => S2CAnimationNotification,
			},
		]);
	}
	create(value?: PartialMessage<GamePacket>): GamePacket {
		const message = globalThis.Object.create(this.messagePrototype!);
		message.payload = { oneofKind: undefined };
		if (value !== undefined) reflectionMergePartial<GamePacket>(this, message, value);
		return message;
	}
	internalBinaryRead(
		reader: IBinaryReader,
		length: number,
		options: BinaryReadOptions,
		target?: GamePacket,
	): GamePacket {
		let message = target ?? this.create(),
			end = reader.pos + length;
		while (reader.pos < end) {
			let [fieldNo, wireType] = reader.tag();
			switch (fieldNo) {
				case /* C2SRegisterRequest registerRequest */ 1:
					message.payload = {
						oneofKind: 'registerRequest',
						registerRequest: C2SRegisterRequest.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).registerRequest,
						),
					};
					break;
				case /* S2CRegisterResponse registerResponse */ 2:
					message.payload = {
						oneofKind: 'registerResponse',
						registerResponse: S2CRegisterResponse.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).registerResponse,
						),
					};
					break;
				case /* C2SLoginRequest loginRequest */ 3:
					message.payload = {
						oneofKind: 'loginRequest',
						loginRequest: C2SLoginRequest.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).loginRequest,
						),
					};
					break;
				case /* S2CLoginResponse loginResponse */ 4:
					message.payload = {
						oneofKind: 'loginResponse',
						loginResponse: S2CLoginResponse.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).loginResponse,
						),
					};
					break;
				case /* C2SCreateRoomRequest createRoomRequest */ 5:
					message.payload = {
						oneofKind: 'createRoomRequest',
						createRoomRequest: C2SCreateRoomRequest.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).createRoomRequest,
						),
					};
					break;
				case /* S2CCreateRoomResponse createRoomResponse */ 6:
					message.payload = {
						oneofKind: 'createRoomResponse',
						createRoomResponse: S2CCreateRoomResponse.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).createRoomResponse,
						),
					};
					break;
				case /* C2SGetRoomListRequest getRoomListRequest */ 7:
					message.payload = {
						oneofKind: 'getRoomListRequest',
						getRoomListRequest: C2SGetRoomListRequest.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).getRoomListRequest,
						),
					};
					break;
				case /* S2CGetRoomListResponse getRoomListResponse */ 8:
					message.payload = {
						oneofKind: 'getRoomListResponse',
						getRoomListResponse: S2CGetRoomListResponse.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).getRoomListResponse,
						),
					};
					break;
				case /* C2SJoinRoomRequest joinRoomRequest */ 9:
					message.payload = {
						oneofKind: 'joinRoomRequest',
						joinRoomRequest: C2SJoinRoomRequest.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).joinRoomRequest,
						),
					};
					break;
				case /* S2CJoinRoomResponse joinRoomResponse */ 10:
					message.payload = {
						oneofKind: 'joinRoomResponse',
						joinRoomResponse: S2CJoinRoomResponse.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).joinRoomResponse,
						),
					};
					break;
				case /* C2SJoinRandomRoomRequest joinRandomRoomRequest */ 11:
					message.payload = {
						oneofKind: 'joinRandomRoomRequest',
						joinRandomRoomRequest: C2SJoinRandomRoomRequest.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).joinRandomRoomRequest,
						),
					};
					break;
				case /* S2CJoinRandomRoomResponse joinRandomRoomResponse */ 12:
					message.payload = {
						oneofKind: 'joinRandomRoomResponse',
						joinRandomRoomResponse: S2CJoinRandomRoomResponse.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).joinRandomRoomResponse,
						),
					};
					break;
				case /* S2CJoinRoomNotification joinRoomNotification */ 13:
					message.payload = {
						oneofKind: 'joinRoomNotification',
						joinRoomNotification: S2CJoinRoomNotification.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).joinRoomNotification,
						),
					};
					break;
				case /* C2SLeaveRoomRequest leaveRoomRequest */ 14:
					message.payload = {
						oneofKind: 'leaveRoomRequest',
						leaveRoomRequest: C2SLeaveRoomRequest.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).leaveRoomRequest,
						),
					};
					break;
				case /* S2CLeaveRoomResponse leaveRoomResponse */ 15:
					message.payload = {
						oneofKind: 'leaveRoomResponse',
						leaveRoomResponse: S2CLeaveRoomResponse.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).leaveRoomResponse,
						),
					};
					break;
				case /* S2CLeaveRoomNotification leaveRoomNotification */ 16:
					message.payload = {
						oneofKind: 'leaveRoomNotification',
						leaveRoomNotification: S2CLeaveRoomNotification.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).leaveRoomNotification,
						),
					};
					break;
				case /* C2SGamePrepareRequest gamePrepareRequest */ 17:
					message.payload = {
						oneofKind: 'gamePrepareRequest',
						gamePrepareRequest: C2SGamePrepareRequest.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).gamePrepareRequest,
						),
					};
					break;
				case /* S2CGamePrepareResponse gamePrepareResponse */ 18:
					message.payload = {
						oneofKind: 'gamePrepareResponse',
						gamePrepareResponse: S2CGamePrepareResponse.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).gamePrepareResponse,
						),
					};
					break;
				case /* S2CGamePrepareNotification gamePrepareNotification */ 19:
					message.payload = {
						oneofKind: 'gamePrepareNotification',
						gamePrepareNotification: S2CGamePrepareNotification.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).gamePrepareNotification,
						),
					};
					break;
				case /* C2SGameStartRequest gameStartRequest */ 20:
					message.payload = {
						oneofKind: 'gameStartRequest',
						gameStartRequest: C2SGameStartRequest.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).gameStartRequest,
						),
					};
					break;
				case /* S2CGameStartResponse gameStartResponse */ 21:
					message.payload = {
						oneofKind: 'gameStartResponse',
						gameStartResponse: S2CGameStartResponse.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).gameStartResponse,
						),
					};
					break;
				case /* S2CGameStartNotification gameStartNotification */ 22:
					message.payload = {
						oneofKind: 'gameStartNotification',
						gameStartNotification: S2CGameStartNotification.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).gameStartNotification,
						),
					};
					break;
				case /* C2SPositionUpdateRequest positionUpdateRequest */ 23:
					message.payload = {
						oneofKind: 'positionUpdateRequest',
						positionUpdateRequest: C2SPositionUpdateRequest.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).positionUpdateRequest,
						),
					};
					break;
				case /* S2CPositionUpdateNotification positionUpdateNotification */ 24:
					message.payload = {
						oneofKind: 'positionUpdateNotification',
						positionUpdateNotification: S2CPositionUpdateNotification.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).positionUpdateNotification,
						),
					};
					break;
				case /* C2SUseCardRequest useCardRequest */ 25:
					message.payload = {
						oneofKind: 'useCardRequest',
						useCardRequest: C2SUseCardRequest.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).useCardRequest,
						),
					};
					break;
				case /* S2CUseCardResponse useCardResponse */ 26:
					message.payload = {
						oneofKind: 'useCardResponse',
						useCardResponse: S2CUseCardResponse.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).useCardResponse,
						),
					};
					break;
				case /* S2CUseCardNotification useCardNotification */ 27:
					message.payload = {
						oneofKind: 'useCardNotification',
						useCardNotification: S2CUseCardNotification.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).useCardNotification,
						),
					};
					break;
				case /* S2CEquipCardNotification equipCardNotification */ 28:
					message.payload = {
						oneofKind: 'equipCardNotification',
						equipCardNotification: S2CEquipCardNotification.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).equipCardNotification,
						),
					};
					break;
				case /* S2CCardEffectNotification cardEffectNotification */ 29:
					message.payload = {
						oneofKind: 'cardEffectNotification',
						cardEffectNotification: S2CCardEffectNotification.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).cardEffectNotification,
						),
					};
					break;
				case /* S2CFleaMarketNotification fleaMarketNotification */ 30:
					message.payload = {
						oneofKind: 'fleaMarketNotification',
						fleaMarketNotification: S2CFleaMarketNotification.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).fleaMarketNotification,
						),
					};
					break;
				case /* C2SFleaMarketPickRequest fleaMarketPickRequest */ 31:
					message.payload = {
						oneofKind: 'fleaMarketPickRequest',
						fleaMarketPickRequest: C2SFleaMarketPickRequest.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).fleaMarketPickRequest,
						),
					};
					break;
				case /* S2CFleaMarketPickResponse fleaMarketPickResponse */ 32:
					message.payload = {
						oneofKind: 'fleaMarketPickResponse',
						fleaMarketPickResponse: S2CFleaMarketPickResponse.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).fleaMarketPickResponse,
						),
					};
					break;
				case /* S2CUserUpdateNotification userUpdateNotification */ 33:
					message.payload = {
						oneofKind: 'userUpdateNotification',
						userUpdateNotification: S2CUserUpdateNotification.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).userUpdateNotification,
						),
					};
					break;
				case /* S2CPhaseUpdateNotification phaseUpdateNotification */ 34:
					message.payload = {
						oneofKind: 'phaseUpdateNotification',
						phaseUpdateNotification: S2CPhaseUpdateNotification.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).phaseUpdateNotification,
						),
					};
					break;
				case /* C2SReactionRequest reactionRequest */ 35:
					message.payload = {
						oneofKind: 'reactionRequest',
						reactionRequest: C2SReactionRequest.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).reactionRequest,
						),
					};
					break;
				case /* S2CReactionResponse reactionResponse */ 36:
					message.payload = {
						oneofKind: 'reactionResponse',
						reactionResponse: S2CReactionResponse.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).reactionResponse,
						),
					};
					break;
				case /* C2SDestroyCardRequest destroyCardRequest */ 37:
					message.payload = {
						oneofKind: 'destroyCardRequest',
						destroyCardRequest: C2SDestroyCardRequest.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).destroyCardRequest,
						),
					};
					break;
				case /* S2CDestroyCardResponse destroyCardResponse */ 38:
					message.payload = {
						oneofKind: 'destroyCardResponse',
						destroyCardResponse: S2CDestroyCardResponse.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).destroyCardResponse,
						),
					};
					break;
				case /* S2CGameEndNotification gameEndNotification */ 39:
					message.payload = {
						oneofKind: 'gameEndNotification',
						gameEndNotification: S2CGameEndNotification.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).gameEndNotification,
						),
					};
					break;
				case /* C2SCardSelectRequest cardSelectRequest */ 40:
					message.payload = {
						oneofKind: 'cardSelectRequest',
						cardSelectRequest: C2SCardSelectRequest.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).cardSelectRequest,
						),
					};
					break;
				case /* S2CCardSelectResponse cardSelectResponse */ 41:
					message.payload = {
						oneofKind: 'cardSelectResponse',
						cardSelectResponse: S2CCardSelectResponse.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).cardSelectResponse,
						),
					};
					break;
				case /* C2SPassDebuffRequest passDebuffRequest */ 42:
					message.payload = {
						oneofKind: 'passDebuffRequest',
						passDebuffRequest: C2SPassDebuffRequest.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).passDebuffRequest,
						),
					};
					break;
				case /* S2CPassDebuffResponse passDebuffResponse */ 43:
					message.payload = {
						oneofKind: 'passDebuffResponse',
						passDebuffResponse: S2CPassDebuffResponse.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).passDebuffResponse,
						),
					};
					break;
				case /* S2CWarningNotification warningNotification */ 44:
					message.payload = {
						oneofKind: 'warningNotification',
						warningNotification: S2CWarningNotification.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).warningNotification,
						),
					};
					break;
				case /* S2CAnimationNotification animationNotification */ 45:
					message.payload = {
						oneofKind: 'animationNotification',
						animationNotification: S2CAnimationNotification.internalBinaryRead(
							reader,
							reader.uint32(),
							options,
							(message.payload as any).animationNotification,
						),
					};
					break;
				default:
					let u = options.readUnknownField;
					if (u === 'throw')
						throw new globalThis.Error(
							`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
						);
					let d = reader.skip(wireType);
					if (u !== false)
						(u === true ? UnknownFieldHandler.onRead : u)(
							this.typeName,
							message,
							fieldNo,
							wireType,
							d,
						);
			}
		}
		return message;
	}
	internalBinaryWrite(
		message: GamePacket,
		writer: IBinaryWriter,
		options: BinaryWriteOptions,
	): IBinaryWriter {
		/* C2SRegisterRequest registerRequest = 1; */
		if (message.payload.oneofKind === 'registerRequest')
			C2SRegisterRequest.internalBinaryWrite(
				message.payload.registerRequest,
				writer.tag(1, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CRegisterResponse registerResponse = 2; */
		if (message.payload.oneofKind === 'registerResponse')
			S2CRegisterResponse.internalBinaryWrite(
				message.payload.registerResponse,
				writer.tag(2, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* C2SLoginRequest loginRequest = 3; */
		if (message.payload.oneofKind === 'loginRequest')
			C2SLoginRequest.internalBinaryWrite(
				message.payload.loginRequest,
				writer.tag(3, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CLoginResponse loginResponse = 4; */
		if (message.payload.oneofKind === 'loginResponse')
			S2CLoginResponse.internalBinaryWrite(
				message.payload.loginResponse,
				writer.tag(4, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* C2SCreateRoomRequest createRoomRequest = 5; */
		if (message.payload.oneofKind === 'createRoomRequest')
			C2SCreateRoomRequest.internalBinaryWrite(
				message.payload.createRoomRequest,
				writer.tag(5, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CCreateRoomResponse createRoomResponse = 6; */
		if (message.payload.oneofKind === 'createRoomResponse')
			S2CCreateRoomResponse.internalBinaryWrite(
				message.payload.createRoomResponse,
				writer.tag(6, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* C2SGetRoomListRequest getRoomListRequest = 7; */
		if (message.payload.oneofKind === 'getRoomListRequest')
			C2SGetRoomListRequest.internalBinaryWrite(
				message.payload.getRoomListRequest,
				writer.tag(7, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CGetRoomListResponse getRoomListResponse = 8; */
		if (message.payload.oneofKind === 'getRoomListResponse')
			S2CGetRoomListResponse.internalBinaryWrite(
				message.payload.getRoomListResponse,
				writer.tag(8, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* C2SJoinRoomRequest joinRoomRequest = 9; */
		if (message.payload.oneofKind === 'joinRoomRequest')
			C2SJoinRoomRequest.internalBinaryWrite(
				message.payload.joinRoomRequest,
				writer.tag(9, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CJoinRoomResponse joinRoomResponse = 10; */
		if (message.payload.oneofKind === 'joinRoomResponse')
			S2CJoinRoomResponse.internalBinaryWrite(
				message.payload.joinRoomResponse,
				writer.tag(10, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* C2SJoinRandomRoomRequest joinRandomRoomRequest = 11; */
		if (message.payload.oneofKind === 'joinRandomRoomRequest')
			C2SJoinRandomRoomRequest.internalBinaryWrite(
				message.payload.joinRandomRoomRequest,
				writer.tag(11, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CJoinRandomRoomResponse joinRandomRoomResponse = 12; */
		if (message.payload.oneofKind === 'joinRandomRoomResponse')
			S2CJoinRandomRoomResponse.internalBinaryWrite(
				message.payload.joinRandomRoomResponse,
				writer.tag(12, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CJoinRoomNotification joinRoomNotification = 13; */
		if (message.payload.oneofKind === 'joinRoomNotification')
			S2CJoinRoomNotification.internalBinaryWrite(
				message.payload.joinRoomNotification,
				writer.tag(13, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* C2SLeaveRoomRequest leaveRoomRequest = 14; */
		if (message.payload.oneofKind === 'leaveRoomRequest')
			C2SLeaveRoomRequest.internalBinaryWrite(
				message.payload.leaveRoomRequest,
				writer.tag(14, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CLeaveRoomResponse leaveRoomResponse = 15; */
		if (message.payload.oneofKind === 'leaveRoomResponse')
			S2CLeaveRoomResponse.internalBinaryWrite(
				message.payload.leaveRoomResponse,
				writer.tag(15, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CLeaveRoomNotification leaveRoomNotification = 16; */
		if (message.payload.oneofKind === 'leaveRoomNotification')
			S2CLeaveRoomNotification.internalBinaryWrite(
				message.payload.leaveRoomNotification,
				writer.tag(16, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* C2SGamePrepareRequest gamePrepareRequest = 17; */
		if (message.payload.oneofKind === 'gamePrepareRequest')
			C2SGamePrepareRequest.internalBinaryWrite(
				message.payload.gamePrepareRequest,
				writer.tag(17, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CGamePrepareResponse gamePrepareResponse = 18; */
		if (message.payload.oneofKind === 'gamePrepareResponse')
			S2CGamePrepareResponse.internalBinaryWrite(
				message.payload.gamePrepareResponse,
				writer.tag(18, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CGamePrepareNotification gamePrepareNotification = 19; */
		if (message.payload.oneofKind === 'gamePrepareNotification')
			S2CGamePrepareNotification.internalBinaryWrite(
				message.payload.gamePrepareNotification,
				writer.tag(19, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* C2SGameStartRequest gameStartRequest = 20; */
		if (message.payload.oneofKind === 'gameStartRequest')
			C2SGameStartRequest.internalBinaryWrite(
				message.payload.gameStartRequest,
				writer.tag(20, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CGameStartResponse gameStartResponse = 21; */
		if (message.payload.oneofKind === 'gameStartResponse')
			S2CGameStartResponse.internalBinaryWrite(
				message.payload.gameStartResponse,
				writer.tag(21, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CGameStartNotification gameStartNotification = 22; */
		if (message.payload.oneofKind === 'gameStartNotification')
			S2CGameStartNotification.internalBinaryWrite(
				message.payload.gameStartNotification,
				writer.tag(22, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* C2SPositionUpdateRequest positionUpdateRequest = 23; */
		if (message.payload.oneofKind === 'positionUpdateRequest')
			C2SPositionUpdateRequest.internalBinaryWrite(
				message.payload.positionUpdateRequest,
				writer.tag(23, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CPositionUpdateNotification positionUpdateNotification = 24; */
		if (message.payload.oneofKind === 'positionUpdateNotification')
			S2CPositionUpdateNotification.internalBinaryWrite(
				message.payload.positionUpdateNotification,
				writer.tag(24, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* C2SUseCardRequest useCardRequest = 25; */
		if (message.payload.oneofKind === 'useCardRequest')
			C2SUseCardRequest.internalBinaryWrite(
				message.payload.useCardRequest,
				writer.tag(25, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CUseCardResponse useCardResponse = 26; */
		if (message.payload.oneofKind === 'useCardResponse')
			S2CUseCardResponse.internalBinaryWrite(
				message.payload.useCardResponse,
				writer.tag(26, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CUseCardNotification useCardNotification = 27; */
		if (message.payload.oneofKind === 'useCardNotification')
			S2CUseCardNotification.internalBinaryWrite(
				message.payload.useCardNotification,
				writer.tag(27, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CEquipCardNotification equipCardNotification = 28; */
		if (message.payload.oneofKind === 'equipCardNotification')
			S2CEquipCardNotification.internalBinaryWrite(
				message.payload.equipCardNotification,
				writer.tag(28, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CCardEffectNotification cardEffectNotification = 29; */
		if (message.payload.oneofKind === 'cardEffectNotification')
			S2CCardEffectNotification.internalBinaryWrite(
				message.payload.cardEffectNotification,
				writer.tag(29, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CFleaMarketNotification fleaMarketNotification = 30; */
		if (message.payload.oneofKind === 'fleaMarketNotification')
			S2CFleaMarketNotification.internalBinaryWrite(
				message.payload.fleaMarketNotification,
				writer.tag(30, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* C2SFleaMarketPickRequest fleaMarketPickRequest = 31; */
		if (message.payload.oneofKind === 'fleaMarketPickRequest')
			C2SFleaMarketPickRequest.internalBinaryWrite(
				message.payload.fleaMarketPickRequest,
				writer.tag(31, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CFleaMarketPickResponse fleaMarketPickResponse = 32; */
		if (message.payload.oneofKind === 'fleaMarketPickResponse')
			S2CFleaMarketPickResponse.internalBinaryWrite(
				message.payload.fleaMarketPickResponse,
				writer.tag(32, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CUserUpdateNotification userUpdateNotification = 33; */
		if (message.payload.oneofKind === 'userUpdateNotification')
			S2CUserUpdateNotification.internalBinaryWrite(
				message.payload.userUpdateNotification,
				writer.tag(33, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CPhaseUpdateNotification phaseUpdateNotification = 34; */
		if (message.payload.oneofKind === 'phaseUpdateNotification')
			S2CPhaseUpdateNotification.internalBinaryWrite(
				message.payload.phaseUpdateNotification,
				writer.tag(34, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* C2SReactionRequest reactionRequest = 35; */
		if (message.payload.oneofKind === 'reactionRequest')
			C2SReactionRequest.internalBinaryWrite(
				message.payload.reactionRequest,
				writer.tag(35, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CReactionResponse reactionResponse = 36; */
		if (message.payload.oneofKind === 'reactionResponse')
			S2CReactionResponse.internalBinaryWrite(
				message.payload.reactionResponse,
				writer.tag(36, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* C2SDestroyCardRequest destroyCardRequest = 37; */
		if (message.payload.oneofKind === 'destroyCardRequest')
			C2SDestroyCardRequest.internalBinaryWrite(
				message.payload.destroyCardRequest,
				writer.tag(37, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CDestroyCardResponse destroyCardResponse = 38; */
		if (message.payload.oneofKind === 'destroyCardResponse')
			S2CDestroyCardResponse.internalBinaryWrite(
				message.payload.destroyCardResponse,
				writer.tag(38, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CGameEndNotification gameEndNotification = 39; */
		if (message.payload.oneofKind === 'gameEndNotification')
			S2CGameEndNotification.internalBinaryWrite(
				message.payload.gameEndNotification,
				writer.tag(39, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* C2SCardSelectRequest cardSelectRequest = 40; */
		if (message.payload.oneofKind === 'cardSelectRequest')
			C2SCardSelectRequest.internalBinaryWrite(
				message.payload.cardSelectRequest,
				writer.tag(40, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CCardSelectResponse cardSelectResponse = 41; */
		if (message.payload.oneofKind === 'cardSelectResponse')
			S2CCardSelectResponse.internalBinaryWrite(
				message.payload.cardSelectResponse,
				writer.tag(41, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* C2SPassDebuffRequest passDebuffRequest = 42; */
		if (message.payload.oneofKind === 'passDebuffRequest')
			C2SPassDebuffRequest.internalBinaryWrite(
				message.payload.passDebuffRequest,
				writer.tag(42, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CPassDebuffResponse passDebuffResponse = 43; */
		if (message.payload.oneofKind === 'passDebuffResponse')
			S2CPassDebuffResponse.internalBinaryWrite(
				message.payload.passDebuffResponse,
				writer.tag(43, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CWarningNotification warningNotification = 44; */
		if (message.payload.oneofKind === 'warningNotification')
			S2CWarningNotification.internalBinaryWrite(
				message.payload.warningNotification,
				writer.tag(44, WireType.LengthDelimited).fork(),
				options,
			).join();
		/* S2CAnimationNotification animationNotification = 45; */
		if (message.payload.oneofKind === 'animationNotification')
			S2CAnimationNotification.internalBinaryWrite(
				message.payload.animationNotification,
				writer.tag(45, WireType.LengthDelimited).fork(),
				options,
			).join();
		let u = options.writeUnknownFields;
		if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
		return writer;
	}
}
/**
 * @generated MessageType for protobuf message GamePacket
 */
export const GamePacket = new GamePacket$Type();
